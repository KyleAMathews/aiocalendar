<?php

include_once('aiocalendar.features.inc');

/*
 * Implementation of hook_init().
 */
function aiocalendar_init() {
  //dpm(realpath(drupal_get_path('module', 'phpmailer') . '/phpmailer/class.phpmailer.php'));
  //dpm("boo");
  drupal_add_css(drupal_get_path('module', 'aiocalendar') . "/aiocalendar.css");
  drupal_add_css(drupal_get_path('module', 'aiocalendar') . "/js/start_ui_theme/ui.all.css");
  drupal_add_css(file_directory_path() . "/aiocalendar_legend.css");
  drupal_add_js(drupal_get_path('module', 'aiocalendar') . "/aiocalendar.js");
  drupal_add_js(drupal_get_path('module', 'aiocalendar') . "/js/jquery.bt.min.js");
  drupal_add_js(drupal_get_path('module', 'aiocalendar') . "/js/excanvas/excanvas.compiled.js");
  drupal_add_js(drupal_get_path('module', 'aiocalendar') . "/js/hoverintent.js");
  drupal_add_js(drupal_get_path('module', 'aiocalendar') . "/js/js/jquery-ui-1.6.custom.min.js");
  drupal_add_js("Drupal.settings.aiocalendarPath = '" . drupal_get_path('module', 'aiocalendar') . "';", 'inline');
  
  // Add the email submit form:
  drupal_add_js("alert(" + $email_event_form + ")
              $(document).ready( function() {
                $('body').append('" + $email_event_form + "');
                
                
                
                
                
                
              });  ", 'inline');
  
  // Add path to theme to Drupal.settings.themePath
  $theme_path = path_to_theme();
  drupal_add_js("Drupal.settings.themePath = '" . $theme_path . "';", 'inline');
}

/*
 * Implementation of hook_views_pre_render().
 * Generate CSS to color border above checkboxes and add email event form.
 */
function aiocalendar_views_pre_render (&$view) {
  $calendar_colors = array();
  if ($view->name == "events_calendar"
      && isset($view->date_info->calendar_colors_taxonomy)) {
    
    // Add form for emailing events. We hide it via css.
    $email_event_form = drupal_get_form('aiocalendar_email_event_form');
    $view->attachment_before = $email_event_form;
    
    $calendar_colors = $view->date_info->calendar_colors_taxonomy;
    
    $css = "";
    foreach ($calendar_colors as $tid => $color) {
      $css .= "#edit-tid-" . $tid . "-wrapper {";
      $css .= "border-top: 5px solid " . $color . ";";
      $css .= "}";
    }
    if (!empty($css)) {
      file_save_data($css, file_directory_path() . "/aiocalendar_legend.css",
                     FILE_EXISTS_REPLACE);
    }
  }
}

/**
 * Implementation of hook_strongarm().
 */
function aiocalendar_strongarm() {
  // Strongarm variables for views_checkbox.
  $conf = array();
  $conf['views_checkboxes_limit'] = '20';
  $conf['views_checkboxes_listsize'] = '20';
  $conf['views_checkboxes_checkbox_enable'] = 1;
  $conf['views_checkboxes_radio_enable'] = 1;
  $conf['views_checkboxes_sizeup'] = 1;
  
  return $conf;
}

/*
 * Override theme_calendar_ical_icon() so we can override the url produced.
 */
function phptemplate_calendar_ical_icon($url) {
  $search = preg_match_all("/tid\[([0-9])*\]/", $url, $matches);
  $tids = $matches[1];

  $search = preg_match("/(.*ical\/)20[0-9]{2}.*/", $url, $url_stem);

  $url = $url_stem[1];

  // Views arguments treat a "+" between arguments as OR.
  // So we're crafting an argument that asks for all events which match one of the
  // term IDs.
  foreach($tids as $tid) {
    $url .= $tid . "+";
  }
  
  // Clean off extra +
  $url = trim($url, "+");

  
  if ($image = theme('image', drupal_get_path('module', 'aiocalendar') .'/images/ical.png', t('Add to calendar'), t('Add to calendar'))) {
    return '<div style="text-align:r  ight"><a href="'. check_url($url) .'" class="ical-icon" title="ical">'. $image .'</a></div>';
  }
}

/**
 * Override theme_feed_icon() so we can override the url produced.
 * 
 * Return code that emits an feed icon.
 *
 * @param $url
 *   The url of the feed.
 * @param $title
 *   A descriptive title of the feed.
  */
function phptemplate_feed_icon($url, $title) {
  $search = preg_match_all("/tid\[([0-9])*\]/", $url, $matches);
  $tids = $matches[1];

  $search = preg_match("/(.*rss\/)20[0-9]{2}-.*/", $url, $url_stem);

  $url = $url_stem[1];

  // Views arguments treat a "+" between arguments as OR.
  // So we're crafting an argument that asks for all events which match one of the
  // term IDs.
  foreach($tids as $tid) {
    $url .= $tid . "+";
  }
  
  // Clean off extra +
  $url = trim($url, "+");
  
  if ($image = theme('image', drupal_get_path('module', 'aiocalendar') .'/images/feed-icon.png', t('Syndicate content'), 'RSS')) {
    return '<a href="'. check_url($url) .'" class="feed-icon">'. $image .'</a>';
  }
}

function aiocalendar_email_event_form($form_state) {
  $form['your_email'] = array(
    '#type' => 'textfield', 
    '#title' => t('Your Email'),
    '#size' => 30,
    '#maxlength' => 64, 
  );
  $form['to_emails'] = array(
    '#type' => 'textarea', 
    '#title' => t('Friend(s)\' email address. One per line'),
    '#size' => 30,
    '#rows' => 3,
  );
  $form['message'] = array(
    '#type' => 'textarea', 
    '#title' => t('Message (optional)'),
    '#size' => 30,
    '#rows' => 3,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'));
  
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => '123',
  );
  $form['ical_feed_url'] = array(
    '#type' => 'hidden',
    '#value' => '123',
  );
  
  return $form;
}

function aiocalendar_email_event_form_submit($form, &$form_submit) {
  require_once(realpath(drupal_get_path('module', 'phpmailer') . '/phpmailer/class.phpmailer.php'));
  $node = node_load($form['#post']['nid']);

  if (valid_email_address($form['#post']['your_email'])) {
    $from_email = $form['#post']['your_email'];
  }
  else {
    drupal_set_message(t("We couldn't send the notice as your email
      (@email) is not a valid email address. Please try again.",
      array('@email' => $form['#post']['your_email'])));
    return;
  }

  $to_emails = $form['#post']['to_emails'];
  $to_emails = explode("\n", $to_emails);
  
  // Clean up emails.
  foreach ($to_emails as &$email) {
    $email = check_plain(trim($email));  
  }
  
  // Validate to emails.
  foreach ($to_emails as &$email) {
    if (!valid_email_address($email)) {
      drupal_set_message(t("We couldn't send the notice as one of emails
      (@email) is not a valid email address. Please try again.",
      array('@email' => $email)));
      return;
    }
  }
  
  $message = check_plain($form['#post']['message']);
  $event_nid = check_plain($form['#post']['nid']);
  $ical_feed = check_plain($form['#post']['ical_feed_url']);
  
  // iCal feed includes too much.
  $search = preg_match("/\/(calendar\/.*)/", $ical_feed, $matches);
  $ical_feed = $matches[1];
  $ical_url = url($ical_feed, array('absolute' => true));
  
  // Grab the ical file.
  $ical_file = file_get_contents($ical_url);
  
  // Send email using PHPMailer
  $mail = new PHPMailer();
  $mail->CharSet = "UTF-8";

  if (!empty($message)) {
    $body .= "<strong>Message from sender:</strong> <br />";
    $body .= "<p>" . $message . "</p><br />";  
  }
  
  // Add title.
  $body .= "<h2>" . $node->title . "</h2><br />";
  
  // Add Date.
  $format = "M j, Y";
  $format2 = "g:iA";
  if (count($node->field_event_date) > 1) {
    $body .= "<strong>Dates:</strong> " . "<br />";
    foreach ($node->field_event_date as $date) {
      $body .= date($format, strtotime($date['value'])) . " at " .
      date($format2, strtotime($date['value']))
      . " &mdash; " .
      date($format, strtotime($date['value2']))  . " at " .
      date($format2, strtotime($date['value'])) . "<br />";
    }
    $body .= "<br />";
  }
  else {
    $body .= "<strong>Date:</strong> " . date($format, strtotime($node->field_event_date[0]['value']))  . " at " .
      date($format2, strtotime($date['value']))
      . " - " .
      date($format, strtotime($node->field_event_date[0]['value2']))  . " at " .
      date($format2, strtotime($date['value'])) . "<br />";
  }
  
  // Add location.
  $body .= "<strong>Location:</strong> " . array_pop($node->field_event_location[0]) . "<br />";
  
  $body .= $node->body;
  
  $mail->IsSMTP(); // telling the class to use SMTP
  $mail->SMTPDebug  = 0;
  $mail->Host = "gateway.byu.edu"; // Use Gateway as our SMTP server.
  
  $mail->SetFrom($from_email);
  
  $mail->Subject = $node->title;
  
  // TODO add message to body, add begin + end times, add attachment: ical file at end, use actual email addresses.
  //$mail->MsgHTML($body);
  $mail->Body = drupal_html_to_text($body);
  //$mail->AltBody = drupal_html_to_text($body);
  
  foreach ($to_emails as $email) {
    $mail->AddAddress($email);  
  }
  
  $mail->AddStringAttachment($ical_file, $node->title . ".ics");
  $sendResult = $mail->Send();
  if($sendResult == false) {
    watchdog('php',$mail->ErrorInfo,array('%title' => check_plain($node->title)));
  } else {
    drupal_set_message("Mail has been sent");  
  }
}
